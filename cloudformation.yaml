AWSTemplateFormatVersion: '2010-09-09'
Description: 'StreamFlow - Video Streaming Platform Infrastructure'

Parameters:
  SourceBucketName:
    Type: String
    Description: Name of the source bucket where videos are uploaded

  DestinationBucketName:
    Type: String
    Description: Name of the destination bucket where processed videos are stored

Resources:
  VideoMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VideoMetadata
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: videoId
          AttributeType: S
      KeySchema:
        - AttributeName: videoId
          KeyType: HASH

  # SQS Queue for S3 Events
  VideoUploadQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: video-upload-queue
      VisibilityTimeout: 300
      MessageRetentionPeriod: 345600 # 4 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt VideoUploadDeadLetterQueue.Arn
        maxReceiveCount: 5

  # Dead Letter Queue for failed messages
  VideoUploadDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: video-upload-dlq
      MessageRetentionPeriod: 1209600 # 14 days

  # S3 Notification Configuration
  SourceBucketNotificationConfiguration:
    Type: AWS::S3::BucketNotification
    Properties:
      Bucket: !Ref SourceBucketName
      QueueConfigurations:
        - Event: s3:ObjectCreated:*
          Queue: !GetAtt VideoUploadQueue.Arn
          Filter:
            S3Key:
              Rules:
                - Name: suffix
                  Value: .mp4

  # Lambda Function for SQS Processing
  VideoProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: video-processor-lambda
      Handler: lambda.handler
      Role: !GetAtt VideoProcessorLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DESTINATION_BUCKET: !Ref DestinationBucketName
          TASK_DEFINITION: !Ref VideoTranscoderTaskDefinition
          CONTAINER_NAME: video-transcoder
          CLUSTER_NAME: !Ref VideoTranscoderCluster
          VIDEO_TABLE_NAME: !Ref VideoMetadataTable

  # SQS Event Source Mapping for Lambda
  VideoProcessorEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt VideoUploadQueue.Arn
      FunctionName: !GetAtt VideoProcessorFunction.Arn

  # Lambda Role
  VideoProcessorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: VideoProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt VideoUploadQueue.Arn
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: !Ref VideoTranscoderTaskDefinition
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt VideoMetadataTable.Arn

  # ECS Cluster for Video Transcoding
  VideoTranscoderCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: video-transcoder-cluster

  # ECS Task Definition
  VideoTranscoderTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: video-transcoder
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: video-transcoder
          Image: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/video-transcoder:latest
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref VideoTranscoderLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # CloudWatch Log Group for ECS Tasks
  VideoTranscoderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/video-transcoder
      RetentionInDays: 14

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # ECS Task Role (for the container itself)
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VideoTranscoderPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${SourceBucketName}/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${DestinationBucketName}/*
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !GetAtt VideoMetadataTable.Arn

  # API Gateway REST API
  VideoAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: video-api
      Description: API for StreamFlow video management
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for /videos
  VideosResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref VideoAPI
      ParentId: !GetAtt VideoAPI.RootResourceId
      PathPart: videos

  # API Gateway Method for GET /videos
  GetVideosMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref VideoAPI
      ResourceId: !Ref VideosResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VideoAPIFunction.Arn}/invocations

  # API Gateway Resource for /videos/{id}
  VideoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref VideoAPI
      ParentId: !Ref VideosResource
      PathPart: '{id}'

  # API Gateway Method for GET /videos/{id}
  GetVideoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref VideoAPI
      ResourceId: !Ref VideoResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VideoAPIFunction.Arn}/invocations

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetVideosMethod
      - GetVideoMethod
    Properties:
      RestApiId: !Ref VideoAPI
      StageName: prod

  # Lambda Function for API
  VideoAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: video-api-lambda
      Handler: index.getVideos
      Role: !GetAtt VideoAPILambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          VIDEO_TABLE_NAME: !Ref VideoMetadataTable

  # Lambda Permission for API Gateway
  VideoAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VideoAPIFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VideoAPI}/*

  # Lambda Role for API
  VideoAPILambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: VideoAPIPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: !GetAtt VideoMetadataTable.Arn

Outputs:
  VideoAPIEndpoint:
    Description: URL of the API endpoint
    Value: !Sub https://${VideoAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/videos

  VideoMetadataTableName:
    Description: Name of the DynamoDB table for video metadata
    Value: !Ref VideoMetadataTable
